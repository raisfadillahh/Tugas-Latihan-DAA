{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyNQG2fx+bvcw0AMWpZ9fFoh"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":9,"metadata":{"id":"ESymmf1jIwtb","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1728542700673,"user_tz":-420,"elapsed":5477,"user":{"displayName":"akun tugas","userId":"14652019621144598564"}},"outputId":"746d4d8a-7f29-4b95-a9a0-d53df7916f1d"},"outputs":[{"output_type":"stream","name":"stdout","text":["How many terms? 12\n","Fibonacci sequence:\n","0\n","1\n","1\n","2\n","3\n","5\n","8\n","13\n","21\n","34\n","55\n","89\n"]}],"source":["#Fibbonaci dengan while\n","nterms = int(input(\"How many terms? \"))\n","n1, n2 = 0, 1\n","count = 0\n","if nterms <= 0:\n","    print(\"Please enter a positive integer\") # Indented this line to be part of the 'if' block\n","elif nterms == 1: # Changed to '==' for comparison, and added a colon\n","    print(\"Fibonacci sequence upto \",nterms,\":\")\n","    print(n1)\n","else:\n","    print(\"Fibonacci sequence:\")\n","    while count < nterms:\n","        print(n1)\n","        nth = n1 + n2 #update nilai\n","        n1 = n2\n","        n2 = nth\n","        count += 1 # Indented this line to be part of the 'while' loop"]},{"cell_type":"code","source":["# Fibonacci sequence using recursion\n","def recur_fibo(n):\n","    if n <= 1:\n","        return n\n","    else:\n","        return recur_fibo(n - 1) + recur_fibo(n - 2)\n","\n","nterms = 20  # Number of terms\n","\n","# Check if nterms is valid\n","if nterms <= 0:\n","    print(\"Please enter a positive integer\")\n","else:\n","    print(\"Fibonacci sequence:\")\n","    for i in range(nterms):\n","        print(recur_fibo(i), end=' ')\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"xL1OkixyL7vP","executionInfo":{"status":"ok","timestamp":1728542920447,"user_tz":-420,"elapsed":373,"user":{"displayName":"akun tugas","userId":"14652019621144598564"}},"outputId":"3ee2982a-1514-4e70-daeb-28c22b23a57d"},"execution_count":10,"outputs":[{"output_type":"stream","name":"stdout","text":["Fibonacci sequence:\n","0 1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597 2584 4181 "]}]},{"cell_type":"code","source":["import matplotlib.pyplot as plt\n","import random\n","import time\n","import itertools\n","\n","# Generate some random data\n","x = list(range(10))\n","y = [random.randint(0, 10) for _ in range(10)]\n","\n","# Create a simple line plot\n","plt.plot(x, y, marker='o')\n","plt.title('Random Data Plot')\n","plt.xlabel('X-axis')\n","plt.ylabel('Y-axis')\n","plt.grid(True)\n","\n","# Show the plot\n","plt.show()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":472},"id":"-tvTtn_mMQd3","executionInfo":{"status":"ok","timestamp":1728543005160,"user_tz":-420,"elapsed":767,"user":{"displayName":"akun tugas","userId":"14652019621144598564"}},"outputId":"718d2506-4509-4b5e-c0a1-c8d5f0e25771"},"execution_count":11,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["from itertools import permutations\n","\n","def total_distance(tour, distances):\n","    \"\"\"Calculate the total distance of the given tour.\"\"\"\n","    total = 0\n","    for i in range(len(tour)):\n","        total += distances[tour[i]][tour[(i + 1) % len(tour)]]  # wrap around to the start\n","    return total\n","\n","def alltours(cities):\n","    \"\"\"Generate all possible tours of the cities.\"\"\"\n","    return list(permutations(cities))\n","\n","def shortest(tours, distances):\n","    \"\"\"Return the tour with the minimum total distance.\"\"\"\n","    return min(tours, key=lambda tour: total_distance(tour, distances))\n","\n","def exact_TSP(cities, distances):\n","    \"\"\"Generate all possible tours of the cities and choose the shortest one.\"\"\"\n","    return shortest(alltours(cities), distances)\n","\n","# Example usage\n","if __name__ == \"__main__\":\n","    # Define cities and distance matrix\n","    cities = ['A', 'B', 'C']\n","    distances = {\n","        'A': {'A': 0, 'B': 10, 'C': 15},\n","        'B': {'A': 10, 'B': 0, 'C': 20},\n","        'C': {'A': 15, 'B': 20, 'C': 0}\n","    }\n","\n","    best_tour = exact_TSP(cities, distances)\n","    print(\"Shortest tour:\", best_tour)\n","    print(\"Minimum distance:\", total_distance(best_tour, distances))\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"2bIceu20MTFf","executionInfo":{"status":"ok","timestamp":1728543070721,"user_tz":-420,"elapsed":333,"user":{"displayName":"akun tugas","userId":"14652019621144598564"}},"outputId":"2bf2b249-b6f6-4bc7-e458-012240f4f45b"},"execution_count":13,"outputs":[{"output_type":"stream","name":"stdout","text":["Shortest tour: ('A', 'B', 'C')\n","Minimum distance: 45\n"]}]},{"cell_type":"code","source":["import itertools\n","\n","# Define the cities\n","cities = {1, 2, 3}\n","\n","# Generate all possible tours using permutations\n","alltours = itertools.permutations(cities)\n","\n","# Convert the generator to a list and print the tours\n","tour_list = list(alltours)\n","print(tour_list)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"qKQkWLqbMzm_","executionInfo":{"status":"ok","timestamp":1728543147455,"user_tz":-420,"elapsed":344,"user":{"displayName":"akun tugas","userId":"14652019621144598564"}},"outputId":"fbca2151-5281-4952-a66a-08023a4cdc86"},"execution_count":14,"outputs":[{"output_type":"stream","name":"stdout","text":["[(1, 2, 3), (1, 3, 2), (2, 1, 3), (2, 3, 1), (3, 1, 2), (3, 2, 1)]\n"]}]},{"cell_type":"code","source":["class City(complex):\n","    \"\"\"Constructor for new cities using complex numbers.\"\"\"\n","    pass\n","\n","def distance(A, B):\n","    \"\"\"Calculate the distance between two points.\"\"\"\n","    return abs(A - B)\n","\n","# Example usage\n","if __name__ == \"__main__\":\n","    # Define two cities\n","    city1 = City(300, 400)\n","    city2 = City(100, 200)\n","\n","    # Calculate the distance between the two cities\n","    dist = distance(city1, city2)\n","    print(f\"Distance between {city1} and {city2} is {dist}\")\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"jy6ns32wM0vu","executionInfo":{"status":"ok","timestamp":1728543741377,"user_tz":-420,"elapsed":400,"user":{"displayName":"akun tugas","userId":"14652019621144598564"}},"outputId":"46a2aad6-9ab7-4f32-d4e9-af4d797cf149"},"execution_count":15,"outputs":[{"output_type":"stream","name":"stdout","text":["Distance between (300+400j) and (100+200j) is 282.842712474619\n"]}]},{"cell_type":"code","source":["import itertools\n","\n","class City(complex):\n","    \"\"\"Constructor for new cities using complex numbers.\"\"\"\n","    pass\n","\n","def total_distance(tour):\n","    \"\"\"Calculate the total distance of the given tour.\"\"\"\n","    total = 0\n","    for i in range(len(tour)):\n","        total += abs(tour[i] - tour[(i + 1) % len(tour)])  # Wrap around to the start\n","    return total\n","\n","def alltours(cities):\n","    \"\"\"Generate all possible tours of the cities.\"\"\"\n","    return list(itertools.permutations(cities))\n","\n","def shortest(tours):\n","    \"\"\"Return the tour with the minimum total distance.\"\"\"\n","    return min(tours, key=total_distance)\n","\n","def exact_TSP(cities):\n","    \"\"\"Generate all possible tours of the cities and choose the shortest one.\"\"\"\n","    return shortest(alltours(cities))\n","\n","# Example usage\n","if __name__ == \"__main__\":\n","    # Define cities as complex numbers\n","    cities8 = [\n","        City(551, 542),\n","        City(303, 506),\n","        City(252, 365),\n","        City(54, 361),\n","        City(151, 70),\n","        City(498, 96),\n","        City(800, 430),\n","        City(684, 435)\n","    ]\n","\n","    # Find the shortest tour\n","    tour = exact_TSP(cities8)\n","    print(\"Tour:\", tour)\n","    print(\"Total distance:\", total_distance(tour))\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"hQf-O7pWPOWu","executionInfo":{"status":"ok","timestamp":1728543782906,"user_tz":-420,"elapsed":337,"user":{"displayName":"akun tugas","userId":"14652019621144598564"}},"outputId":"ef676c0e-70e1-4a6c-e862-c38f5cc6885b"},"execution_count":16,"outputs":[{"output_type":"stream","name":"stdout","text":["Tour: ((54+361j), (252+365j), (303+506j), (551+542j), (684+435j), (800+430j), (498+96j), (151+70j))\n","Total distance: 1990.388372313552\n"]}]},{"cell_type":"code","source":["import itertools\n","\n","def first(collection):\n","    \"\"\"Return the first element of the collection.\"\"\"\n","    for x in collection:\n","        return x\n","\n","def alltours(cities):\n","    \"\"\"Return a list of tours, each a permutation of cities, but each one starting with the same city.\"\"\"\n","    start = first(cities)\n","    return [[start] + list(tour) for tour in itertools.permutations(cities - {start})]\n","\n","# Example usage\n","if __name__ == \"__main__\":\n","    # Define a set of cities\n","    cities = {1, 2, 3, 4}\n","\n","    # Get all non-redundant tours\n","    tours = alltours(cities)\n","    print(\"All non-redundant tours starting from the same city:\")\n","    for tour in tours:\n","        print(tour)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"HRgoBWiSPYOm","executionInfo":{"status":"ok","timestamp":1728543822473,"user_tz":-420,"elapsed":345,"user":{"displayName":"akun tugas","userId":"14652019621144598564"}},"outputId":"add365cc-00a2-4c94-9382-487de2d3f5fb"},"execution_count":17,"outputs":[{"output_type":"stream","name":"stdout","text":["All non-redundant tours starting from the same city:\n","[1, 2, 3, 4]\n","[1, 2, 4, 3]\n","[1, 3, 2, 4]\n","[1, 3, 4, 2]\n","[1, 4, 2, 3]\n","[1, 4, 3, 2]\n"]}]},{"cell_type":"code","source":["import itertools\n","\n","def first(collection):\n","    \"\"\"Return the first element of the collection.\"\"\"\n","    for x in collection:\n","        return x\n","\n","def alltours(cities):\n","    \"\"\"Return a list of tours, each a permutation of cities, but each one starting with the same city.\"\"\"\n","    start = first(cities)\n","    return [[start] + list(tour) for tour in itertools.permutations(cities - {start})]\n","\n","# Example usage\n","if __name__ == \"__main__\":\n","    print(\"Tours for cities {1, 2, 3}:\")\n","    print(alltours({1, 2, 3}))\n","\n","    print(\"\\nTours for cities {1, 2, 3, 4}:\")\n","    print(alltours({1, 2, 3, 4}))\n"],"metadata":{"id":"B5wSkPdwPj8-"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["\n","tour = exact_TSP(cities8)\n","print (tour)\n","print(total_distance (tour))\n","[(551+542j), (303+506j), (252+365j), (54+361j), (151+70j), (498+96j), (800+430j), (684+435j)]\n","1990.388372313552"],"metadata":{"id":"wkBdN8pIPlBl"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import matplotlib.pyplot as plt\n","import time\n","import itertools\n","\n","# Function to calculate total distance of a tour\n","def total_distance(tour):\n","    \"\"\"Calculate the total distance of the given tour.\"\"\"\n","    total = 0\n","    for i in range(len(tour)):\n","        total += abs(tour[i] - tour[(i + 1) % len(tour)])  # Wrap around to the start\n","    return total\n","\n","# Function to find the shortest tour (example implementation)\n","def exact_TSP(cities):\n","    \"\"\"Find the shortest tour using permutations (brute-force).\"\"\"\n","    return min(itertools.permutations(cities), key=total_distance)\n","\n","def plot_tour(algorithm, cities):\n","    \"\"\"Apply a TSP algorithm to cities, and plot the resulting tour.\"\"\"\n","    # Find the solution and time how long it takes\n","    start_time = time.time()\n","    tour = algorithm(cities)\n","    end_time = time.time()\n","\n","    # Plot the tour\n","    plotline(list(tour) + [tour[0]])  # Connect back to the starting city\n","    plt.plot(tour[0].real, tour[0].imag, 'rs')  # Start city as a red square\n","    plt.title(\"TSP Tour\")\n","    plt.xlabel(\"X Coordinate\")\n","    plt.ylabel(\"Y Coordinate\")\n","    plt.grid()\n","    plt.show()\n","\n","    print(\"{} city tour; total distance = {:.1f}; time = {:.3f} secs for {}\".format(\n","        len(tour), total_distance(tour), end_time - start_time, algorithm.__name__)\n","    )\n","\n","def plotline(points, style='bo-'):\n","    \"\"\"Plot a list of points (complex numbers) in the 2-D plane.\"\"\"\n","    X, Y = XY(points)\n","    plt.plot(X, Y, style)\n","\n","def XY(points):\n","    \"\"\"Given a list of points, return two lists: X coordinates, and Y coordinates.\"\"\"\n","    return [p.real for p in points], [p.imag for p in points]\n","\n","# Example usage\n","if __name__ == \"__main__\":\n","    # Define a set of cities as complex numbers\n","    cities8 = [\n","        complex(551, 542),\n","        complex(303, 506),\n","        complex(252, 365),\n","        complex(54, 361),\n","        complex(151, 70),\n","        complex(498, 96),\n","        complex(800, 430),\n","        complex(684, 435)\n","    ]\n","\n","    # Call the plot function using the exact TSP algorithm\n","    plot_tour(exact_TSP, cities8)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":489},"id":"HBxr76alPsQe","executionInfo":{"status":"ok","timestamp":1728544039410,"user_tz":-420,"elapsed":749,"user":{"displayName":"akun tugas","userId":"14652019621144598564"}},"outputId":"1b3c8e05-a30c-412f-f401-eb6de5b6258f"},"execution_count":21,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}},{"output_type":"stream","name":"stdout","text":["8 city tour; total distance = 1990.4; time = 0.099 secs for exact_TSP\n"]}]},{"cell_type":"code","source":["def greedy_TSP(cities):\n","    \"\"\"At each step, visit the nearest neighbor that is still unvisited.\"\"\"\n","    start = first(cities)\n","    tour = [start]\n","    unvisited = cities - {start}\n","\n","    while unvisited:\n","        C = nearest_neighbor(tour[-1], unvisited)\n","        tour.append(C)\n","        unvisited.remove(C)\n","\n","    return tour\n","\n","def nearest_neighbor(A, cities):\n","    \"\"\"Find the city in cities that is nearest to city A.\"\"\"\n","    return min(cities, key=lambda x: total_distance([A, x]))\n","\n","def first(collection):\n","    \"\"\"Return the first element of the collection.\"\"\"\n","    for x in collection:\n","        return x\n","\n","def total_distance(tour):\n","    \"\"\"Calculate the total distance of the given tour.\"\"\"\n","    total = 0\n","    for i in range(len(tour)):\n","        total += abs(tour[i] - tour[(i + 1) % len(tour)])  # Wrap around to the start\n","    return total\n"],"metadata":{"id":"aXirMaBBQO6W","executionInfo":{"status":"ok","timestamp":1728544113820,"user_tz":-420,"elapsed":344,"user":{"displayName":"akun tugas","userId":"14652019621144598564"}}},"execution_count":24,"outputs":[]},{"cell_type":"code","source":["import itertools\n","import matplotlib.pyplot as plt\n","\n","def first(collection):\n","    \"\"\"Return the first element of the collection.\"\"\"\n","    for x in collection:\n","        return x\n","\n","def total_distance(tour):\n","    \"\"\"Calculate the total distance of the given tour.\"\"\"\n","    total = 0\n","    for i in range(len(tour)):\n","        total += abs(tour[i] - tour[(i + 1) % len(tour)])  # Wrap around to the start\n","    return total\n","\n","def nearest_neighbor(A, cities):\n","    \"\"\"Find the city in cities that is nearest to city A.\"\"\"\n","    return min(cities, key=lambda x: total_distance([A, x]))\n","\n","def greedy_TSP(cities):\n","    \"\"\"At each step, visit the nearest neighbor that is still unvisited.\"\"\"\n","    start = first(cities)\n","    tour = [start]\n","    unvisited = cities - {start}\n","\n","    while unvisited:\n","        C = nearest_neighbor(tour[-1], unvisited)\n","        tour.append(C)\n","        unvisited.remove(C)\n","\n","    return tour\n","\n","def plot_tour(algorithm, cities):\n","    \"\"\"Apply a TSP algorithm to cities, and plot the resulting tour.\"\"\"\n","    start_time = time.time()\n","    tour = algorithm(cities)\n","    end_time = time.time()\n","\n","    plotline(list(tour) + [tour[0]])  # Connect back to the starting city\n","    plt.plot(tour[0].real, tour[0].imag, 'rs')  # Start city as a red square\n","    plt.title(\"TSP Tour\")\n","    plt.xlabel(\"X Coordinate\")\n","    plt.ylabel(\"Y Coordinate\")\n","    plt.grid()\n","    plt.show()\n","\n","    print(\"{} city tour; total distance = {:.1f}; time = {:.3f} secs for {}\".format(\n","        len(tour), total_distance(tour), end_time - start_time, algorithm.__name__)\n","    )\n","\n","def plotline(points, style='bo-'):\n","    \"\"\"Plot a list of points (complex numbers) in the 2-D plane.\"\"\"\n","    X, Y = XY(points)\n","    plt.plot(X, Y, style)\n","\n","def XY(points):\n","    \"\"\"Given a list of points, return two lists: X coordinates, and Y coordinates.\"\"\"\n","    return [p.real for p in points], [p.imag for p in points]\n","\n","# Example usage\n","if __name__ == \"__main__\":\n","    # Define a set of cities as complex numbers\n","    cities8 = {\n","        complex(551, 542),\n","        complex(303, 506),\n","        complex(252, 365),\n","        complex(54, 361),\n","        complex(151, 70),\n","        complex(498, 96),\n","        complex(800, 430),\n","        complex(684, 435)\n","    }\n","\n","    # Call the plot function using the greedy TSP algorithm\n","    plot_tour(greedy_TSP, cities8)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":489},"id":"mD1BTx4eQpuu","executionInfo":{"status":"ok","timestamp":1728544245032,"user_tz":-420,"elapsed":692,"user":{"displayName":"akun tugas","userId":"14652019621144598564"}},"outputId":"1e3f95c0-488d-430e-ba8b-5eb8dca34f33"},"execution_count":28,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}},{"output_type":"stream","name":"stdout","text":["8 city tour; total distance = 1990.4; time = 0.000 secs for greedy_TSP\n"]}]},{"cell_type":"code","source":["import heapq\n","\n","# A Huffman Tree Node\n","class Node:\n","    def __init__(self, freq, symbol, left=None, right=None):\n","        # Frequency of the symbol\n","        self.freq = freq\n","        # Symbol name (character)\n","        self.symbol = symbol\n","        # Node left of current node\n","        self.left = left\n","        # Node right of current node\n","        self.right = right\n","        # Tree direction (0/1)\n","        self.huff = ''\n","\n","    def __lt__(self, nxt):\n","        \"\"\"Less than comparison for priority queue.\"\"\"\n","        return self.freq < nxt.freq\n"],"metadata":{"id":"6cIQyv1BRnIe","executionInfo":{"status":"ok","timestamp":1728544407383,"user_tz":-420,"elapsed":335,"user":{"displayName":"akun tugas","userId":"14652019621144598564"}}},"execution_count":29,"outputs":[]},{"cell_type":"code","source":["# Utility function to print Huffman codes for all symbols in the newly created Huffman tree\n","def print_nodes(node, val=''):\n","    \"\"\"Recursively traverse the Huffman tree and print the codes.\"\"\"\n","    # Huffman code for the current node\n","    new_val = val + str(node.huff)\n","\n","    # If not an edge node, traverse inside it\n","    if node.left:\n","        print_nodes(node.left, new_val)\n","    if node.right:\n","        print_nodes(node.right, new_val)\n","\n","    # If it's an edge node, display its Huffman code\n","    if not node.left and not node.right:\n","        print(f\"{node.symbol} -> {new_val}\")\n"],"metadata":{"id":"2RoojEviRowl","executionInfo":{"status":"ok","timestamp":1728544463956,"user_tz":-420,"elapsed":342,"user":{"displayName":"akun tugas","userId":"14652019621144598564"}}},"execution_count":30,"outputs":[]},{"cell_type":"code","source":["import heapq\n","\n","# Characters for Huffman tree\n","chars = ['a', 'b', 'c', 'd', 'e', 'f']\n","# Frequency of characters\n","freq = [5, 9, 12, 13, 16, 45]\n","# List containing unused nodes\n","nodes = []\n","\n","# Converting characters and frequencies into Huffman tree nodes\n","for x in range(len(chars)):\n","    heapq.heappush(nodes, Node(freq[x], chars[x]))  # Use Node class from previous code\n","\n","# Optional: Print the initial nodes for verification\n","print(\"Initial nodes in the priority queue:\")\n","for node in nodes:\n","    print(f\"{node.symbol}: {node.freq}\")\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"aeKQEtalR0EV","executionInfo":{"status":"ok","timestamp":1728544509231,"user_tz":-420,"elapsed":361,"user":{"displayName":"akun tugas","userId":"14652019621144598564"}},"outputId":"c8e1105b-8c07-4291-edc8-3af4aa2ea8ba"},"execution_count":31,"outputs":[{"output_type":"stream","name":"stdout","text":["Initial nodes in the priority queue:\n","a: 5\n","b: 9\n","c: 12\n","d: 13\n","e: 16\n","f: 45\n"]}]},{"cell_type":"code","source":["import heapq\n","\n","# A Huffman Tree Node\n","class Node:\n","    def __init__(self, freq, symbol, left=None, right=None):\n","        self.freq = freq\n","        self.symbol = symbol\n","        self.left = left\n","        self.right = right\n","        self.huff = ''\n","\n","    def __lt__(self, nxt):\n","        \"\"\"Less than comparison for priority queue.\"\"\"\n","        return self.freq < nxt.freq\n","\n","# Utility function to print Huffman codes\n","def print_nodes(node, val=''):\n","    \"\"\"Recursively traverse the Huffman tree and print the codes.\"\"\"\n","    new_val = val + str(node.huff)\n","    if node.left:\n","        print_nodes(node.left, new_val)\n","    if node.right:\n","        print_nodes(node.right, new_val)\n","    if not node.left and not node.right:\n","        print(f\"{node.symbol} -> {new_val}\")\n","\n","# Function to build Huffman Tree\n","def build_huffman_tree(chars, freq):\n","    # Create a list of nodes\n","    nodes = []\n","\n","    # Create Huffman tree nodes\n","    for x in range(len(chars)):\n","        heapq.heappush(nodes, Node(freq[x], chars[x]))\n","\n","    # Combine nodes to build the Huffman Tree\n","    while len(nodes) > 1:\n","        # Pop the two nodes with the smallest frequency\n","        left = heapq.heappop(nodes)\n","        right = heapq.heappop(nodes)\n","\n","        # Assign directional values to these nodes\n","        left.huff = 0\n","        right.huff = 1\n","\n","        # Create a new node as their parent\n","        new_node = Node(left.freq + right.freq, left.symbol + right.symbol, left, right)\n","\n","        # Push the new node back into the priority queue\n","        heapq.heappush(nodes, new_node)\n","\n","    # The remaining node is the root of the Huffman Tree\n","    return nodes[0]\n","\n","# Example usage\n","if __name__ == \"__main__\":\n","    # Characters and their frequencies\n","    chars = ['a', 'b', 'c', 'd', 'e', 'f']\n","    freq = [5, 9, 12, 13, 16, 45]\n","\n","    # Build Huffman Tree\n","    huffman_tree = build_huffman_tree(chars, freq)\n","\n","    # Print Huffman Codes\n","    print(\"Huffman Codes:\")\n","    print_nodes(huffman_tree)\n"],"metadata":{"id":"-9f9-ny7SLLN","executionInfo":{"status":"ok","timestamp":1728544555273,"user_tz":-420,"elapsed":345,"user":{"displayName":"akun tugas","userId":"14652019621144598564"}},"outputId":"49de2043-a23e-4c40-d25c-2f23523892ae","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":32,"outputs":[{"output_type":"stream","name":"stdout","text":["Huffman Codes:\n","f -> 0\n","c -> 100\n","d -> 101\n","a -> 1100\n","b -> 1101\n","e -> 111\n"]}]}]}